1. DEMONSTRATING DATA SKEW ISSUES
===================================
Creating skewed dataset...

Data distribution:
+----------+------+
|skewed_key| count|
+----------+------+
|         B| 99885|
|         A|900115|
+----------+------+

Data Skewed distribution check took 3.83 seconds

Executing a join that will suffer from data skew...
This might be slow due to data skew...
Skewed join completed with 1000000 rows in 2.54 seconds

2. FIXING THE DATA SKEW ISSUES
===================================
Solution 1: Salting technique to distribute skewed keys
Adding 10 salt values to the skewed key 'A'

Executing join with salting technique...
Salted join completed with 1000000 rows in 1.60 seconds
Improvement over original: 1.59x faster

Solution 2: Broadcast join for skewed data
This technique works well when one table is small enough to broadcast
Broadcast join completed with 1000000 rows in 0.73 seconds
Improvement over original: 3.49x faster

Solution 3: Repartition before joining
creating ultra skewed data with 99% of the data having the same key value 'A'
Repartitioned join completed with 10000000 rows in 6.18 seconds
Improvement over original: 0.89x faster

Solution 4: Two-stage aggregation for aggregation skew
For skewed aggregations, pre-aggregate with more partitions first:
Standard aggregation on skewed data:
+----------+------+
|skewed_key| count|
+----------+------+
|         B| 99885|
|         A|900115|
+----------+------+

Stage 1: Pre-aggregation with many partitions
Stage 2: Final aggregation with fewer partitions
+----------+-----------+
|skewed_key|total_count|
+----------+-----------+
|         B|      99885|
|         A|     900115|
+----------+-----------+

Standard aggregation time: 0.23 seconds
Two-stage aggregation time: 1.65 seconds
Improvement: 0.14x faster

Solution 5: Split processing for skewed keys
Identified most skewed key: A
Split processing completed with 1000000 rows in 0.95 seconds
Improvement over original: 2.66x faster

Spark session stopped
